#include<iostream>
using namespace std;
int n=0,ptr,par,leftt,righttt,last,item,temp;
int tree[20];
void insheap(int item)
{
    n=n+1;
    ptr=n;
    while(ptr>1)
    {
        par=ptr/2;
        if(item<tree[par])
        {
            tree[ptr]=item;
            return ;
        }
        tree[ptr]=tree[par];
        ptr=par;
    }
    tree[1]=item;
    return;
}

void delheap()
{
    item=tree[1];
    last=tree[n];
    n=n-1;
    ptr=1;
    leftt=2;
    righttt=3;
    while(righttt<=n)
    {
        if(last>=tree[leftt]&&last>=tree[righttt])
        {
            tree[ptr]=last;
            return;


        }
        if(tree[righttt]<=tree[leftt])
        {
            temp=last;
            last=tree[leftt];
            tree[leftt]=temp;
            ptr=leftt;
        }
        else{
                temp=last;
            last=tree[righttt];
            tree[righttt] = temp;
            ptr=righttt;
        }
        leftt=2*ptr;
        righttt=leftt+1;
    }
    if(leftt==n)
    {
        if(last<tree[leftt])
        {
        ptr=leftt;
        }

}
tree[ptr]=last;
cout<<"node delete"<<endl;
return;
}

void traverse()
{
    int i;
    for(i=1;i<=n;i++)
    {
        cout<<tree[i]<<endl;
    }
}


int main()
{
    int x;
   while(1)
   {


    {
        cout<<"\nEnter 1 for insert"<<endl;
        cout<<"\n2 for deletion"<<endl;
        cout<<"\n3 for traverse"<<endl;
        cin>>x;
        switch(x)
        {
            case 1:cout<<"\nEnter the element to insert"<<endl;
            cin>>item;
            insheap(item);
            break;
            case 2:delheap();
            break;
            case 3:traverse();
            break;

        }



    }
   }

    return 0;

}

#include <iostream>

using namespace std;
struct node
{
    int data;
    struct node *left;
    struct node *right;
}*root,*temp=NULL;
void Search(struct node *root);
void Insertion()
{
    temp=new node;
    int item;
    cout<<"\nEnter Element u want to insert in BST:";
    cin>>item;
    temp->data=item;
    temp->left=NULL;
    temp->right=NULL;

    if(root==NULL)
    {
        root=temp;
        return;

    }
    else
    {
        Search(root);

    }
}

void Search(struct node *root)
{
    if((temp->data<root->data)&&(root->left==NULL))
    {
        root->left=temp;

    }
    else if((temp->data>root->data)&&(root->right==NULL))
    {
        root->right=temp;


    }
    else if((temp->data<root->data)&&(root->left!=NULL))
    {
        Search(root->left);
    }
    else if((temp->data>root->data)&&(root->right!=NULL))
    {
        Search(root->right);
    }

}

void Deletion()
{

}


void InOrder(struct node *root)
{
    if(root!=NULL)
    {

        InOrder(root->left);
        cout<<"\n"<<root->data;

        InOrder(root->right);

    }
}

void PreOrder(struct node *root)
{
    if(root!=NULL)
    {
        cout<<"\n"<<root->data;

        PreOrder(root->left);
        PreOrder(root->right);

    }

}

void PostOrder(struct node *root)
{
    if(root!=NULL)
    {

        PostOrder(root->left);
        PostOrder(root->right);
        cout<<"\n"<<root->data;

    }
}



int main()
{
    while(1)
    {


        int choice;
        cout << "\n----------------Menu---------";
        cout<<"\n1.Insert";
        cout<<"\n2.Delete";
        cout<<"\n3.InOrder Traversal";
        cout<<"\n4.PreOrder Traversal";
        cout<<"\n5.PostOrder Traversal";
        cout<<"\nEnter Your Choice:";
        cin>>choice;
        switch(choice)
        {
        case 1:
        {
            Insertion();
            break;
        }
        case 2:
        {
            int ele;
            cout<<"\nEnter Element u want to delete
            

            Deletion();
            break;
        }
        case 3:
        {
            InOrder(root);
            break;
        }
        case 4:
        {
            PreOrder(root);
            break;
        }
        case 5:
        {
            PostOrder(root);
            break;

            default:
            {
                cout<<"plz make a valid choice.";
            }
        }

        }
    }
}
